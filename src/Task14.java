/*Задача 14.
        Напишите программу, которая находит все простые числа Мерсенна для p <= 100. По формуле 2^p - 1 */

/*Простое число - это число, которое делится на единицу и само на себя без остатка.
* 2, 3, 5 - простые числа
* 4, 6 - нет, так как могут разделиться на 2 без остатка */

import java.math.BigDecimal;

public class Task14 {
    public static void main(String[] args) {
        int p = 3;
        BigDecimal mersenne;
        boolean simple;

        //  шапка таблицы
        System.out.println("\tp\t 2^p - 1");
        System.out.println("-------------------");
        System.out.println("\t2\t\t3");

        //  число p должно быть до 100 включительно
        for (int i = 2; i < 100; i++) {
            simple = true;  //  в начале каждого цикла мы думаем что число простое

            //  проверка на простое число
            for (int j = 2; j < p; j++) {
                //  увеличиваем постоянно число до самого себя
                if (p % j == 0) {   //  и если оно разделилось без остатка
                    simple = false; //  нас обманули и число не простое
                    break;  //  бросаем цикл, дальше проверять нет смысла
                }
            }
            if (simple) {   //  но если число оказалось простым
                mersenne = BigDecimal.valueOf(Math.pow(2, p) - 1);  //  примеяем формулу
                System.out.println("\t" + p + "\t\t" + mersenne.toBigInteger());    //  и выводим по методу???
            }
            p++;    //  переходим к проверке следующего числа на простоту
        }
    }
}
